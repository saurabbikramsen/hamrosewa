// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  email    String @unique
  password String
  contact  String
}

model user {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  email           String         @unique
  password        String
  contact         String         @unique
  state           String
  city            String
  postal_code     String
  street          String
  number          String?
  location        location       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId      Int            @unique
  booking         booking[]
  interaction     interaction[]
  payment         payment[]
  similarMainUser SimilarUser?   @relation("SimilarMainUser")
  profileViews    ProfileViews[]
  similarUsers    SimilarUser[]  @relation("SimilarUser")

  @@index([id, email])
}

model vendor {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String
  email             String         @unique
  password          String
  contact           String         @unique
  service_type      String
  state             String
  city              String
  postal_code       String
  image_url         String         @default("localhost:9000/hamrosewa/d82ef74fcc41ee18913c43610c5013ab.jpg")
  street            String
  description       String?        @db.VarChar(5000)
  number            String?
  location          location       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId        Int            @unique
  rating            Float?
  visited_frequency Int            @default(0)
  booking           booking[]
  payment           payment[]
  ProfileViews      ProfileViews[]

  @@index([id, email])
}

model ProfileViews {
  id       Int    @id @default(autoincrement())
  count    Int    @default(1)
  userId   Int
  vendorId Int
  user     user   @relation(fields: [userId], references: [id])
  vendor   vendor @relation(fields: [vendorId], references: [id])

  @@unique([userId, vendorId])
}

model location {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  longitude Float
  latitude  Float
  user      user?
  vendor    vendor?

  // @@index([latitude, longitude], name: "location_idx", type: Gist)
}

model booking {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booked_date DateTime
  status      String
  description String
  user        user[]
  vendor      vendor[]
  // user        user     @relation(fields: [userId], references: [id])
  // userId      Int
  // vendor      vendor   @relation(fields: [vendorId], references: [id])
  // vendorId    Int
  payment     payment?
}

model interaction {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interaction_type String
  user             user[]
  service          services[]

  // user      user     @relation(fields: [userId], references: [id])
  // userId    Int
  // service   services @relation(fields: [serviceId], references: [id])
  // serviceId Int
}

model services {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String        @unique
  image_url   String
  description String
  interaction interaction[]
}

model payment {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Int    @default(0)
  status String

  booking   booking  @relation(fields: [bookingId], references: [id])
  bookingId Int      @unique
  vendor    vendor[]
  user      user[]
}

model SimilarUser {
  id           Int    @id @default(autoincrement())
  mainUserId   Int
  mainUser     user   @relation("SimilarMainUser", fields: [mainUserId], references: [id])
  similarUsers user[] @relation("SimilarUser")

  @@unique([mainUserId])
}
