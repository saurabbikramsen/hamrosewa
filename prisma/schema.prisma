// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name     String
  email    String @unique
  password String
  contact  String
}

model user {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String
  email       String        @unique
  password    String
  contact     String
  state       String
  city        String
  postal_code String
  street      String
  number      String?
  location    location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId  Int           @unique
  booking     booking[]
  interaction interaction[]
}

model location {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  longitude Float
  latitude  Float
  user      user?
  vendor    vendor?
}

model booking {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  booked_date String
  status      String
  user        user[]
  vendor      vendor[]
  // user        user     @relation(fields: [userId], references: [id])
  // userId      Int
  // vendor      vendor   @relation(fields: [vendorId], references: [id])
  // vendorId    Int
  payment     payment?
}

model interaction {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  interaction_type String
  user             user[]
  service          services[]

  // user      user     @relation(fields: [userId], references: [id])
  // userId    Int
  // service   services @relation(fields: [serviceId], references: [id])
  // serviceId Int
}

model vendor {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name         String
  email        String    @unique
  password     String
  contact      String
  service_type String
  state        String
  city         String
  postal_code  String
  street       String
  number       String?
  location     location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId   Int       @unique
  booking      booking[]
}

model services {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String        @unique
  image_url   String
  description String
  interaction interaction[]
}

model payment {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  amount Int?
  status String

  booking   booking @relation(fields: [bookingId], references: [id])
  bookingId Int     @unique
}
